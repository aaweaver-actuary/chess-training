name: Run with CI error logging
description: Run a command and capture logs when it exits with code 1.
inputs:
  command:
    description: Command to execute.
    required: true
  label:
    description: Identifier used to name the log file.
    required: false
  working-directory:
    description: Directory in which to run the command.
    required: false
runs:
  using: composite
  steps:
    - id: run
      shell: bash
      run: |
        set -o pipefail

        repo_root="$(pwd)"
        workdir="${{ inputs.working-directory }}"
        if [ -n "$workdir" ]; then
          cd "$workdir"
        fi

        tmp_log="$(mktemp)"
        tmp_script="$(mktemp)"

        printf '%s\n' "${{ inputs.command }}" >"$tmp_script"

        
        bash "$tmp_script" 2>&1 | tee "$tmp_log"
        status=${PIPESTATUS[0]}

        if [ "$status" -eq 1 ]; then
          mkdir -p "$repo_root/ci-errors"
          label="${{ inputs.label }}"
          if [ -z "$label" ]; then
            label="step"
          fi
          safe_label=$(echo "$label" | tr '[:space:]/' '__')
          safe_label=$(echo "$safe_label" | tr -cd '[:alnum:]_.-')
          if [ -z "$safe_label" ]; then
            safe_label="step"
          fi
          timestamp=$(date -u +"%Y%m%dT%H%M%SZ")
          dest="$repo_root/ci-errors/${timestamp}_${safe_label}.log"
          cp "$tmp_log" "$dest"
          echo "Saved CI error log to $dest"

          if [ -n "$GITHUB_TOKEN" ] && [ -n "$GITHUB_REPOSITORY" ]; then
            issue_title="CI failure: $label ($timestamp)"
            issue_api_url="https://api.github.com/repos/$GITHUB_REPOSITORY/issues"

            export ISSUE_TITLE="$issue_title"
            export ISSUE_LABEL="$label"
            export ISSUE_TIMESTAMP="$timestamp"
            export ISSUE_LOG_PATH="$tmp_log"

            issue_payload=$(python3 <<'PY'
import json
import os
import sys

title = os.environ.get("ISSUE_TITLE", "CI failure")
label = os.environ.get("ISSUE_LABEL", "step")
timestamp = os.environ.get("ISSUE_TIMESTAMP", "")
log_path = os.environ.get("ISSUE_LOG_PATH")

if not log_path:
    print("::warning::Missing CI log path; cannot create GitHub issue.", file=sys.stderr)
    sys.exit(0)

try:
    with open(log_path, "r", encoding="utf-8") as handle:
        log_content = handle.read()
except OSError as exc:
    print(f"::warning::Failed to read CI log: {exc}", file=sys.stderr)
    sys.exit(0)

body = f"CI step `{label}` failed at {timestamp}.\n\n```\n{log_content}\n```"

print(json.dumps({"title": title, "body": body}))
PY
)

            if [ -n "$issue_payload" ]; then
              response=$(curl -sS -X POST \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                -H "Content-Type: application/json" \
                "$issue_api_url" \
                -d "$issue_payload")

              curl_status=$?
              if [ "$curl_status" -ne 0 ]; then
                echo "::warning::Failed to contact GitHub API to create CI failure issue."
              else
                issue_number=$(python3 <<'PY'
import json
import sys

try:
    data = json.load(sys.stdin)
except json.JSONDecodeError:
    sys.exit(1)

number = data.get("number")
if number is not None:
    print(number)
PY
 <<<"$response")

                if [ -n "$issue_number" ]; then
                  echo "Created GitHub issue #$issue_number for CI failure logs."
                else
                  echo "::warning::Received unexpected response while creating GitHub issue."
                fi
              fi
            else
              echo "::warning::Failed to build GitHub issue payload for CI failure."
            fi
          else
            echo "::warning::Skipping GitHub issue creation; missing GITHUB_TOKEN or GITHUB_REPOSITORY."
          fi
        fi

        rm -f "$tmp_log" "$tmp_script"
        exit "$status"
