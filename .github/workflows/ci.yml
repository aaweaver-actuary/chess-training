name: Strict CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - master
      - main

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUSTDOCFLAGS: -D warnings
  CARGO_INCREMENTAL: '0'

jobs:
  rust:
    name: "Rust checks (${{ matrix.crate }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - card-store
          - review-domain
          - chess-training-pgn-import
          - scheduler-core
          - chess-training
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: clippy, rustfmt, llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov
      - name: Verify formatting (${{ matrix.crate }})
        run: cargo fmt --package ${{ matrix.crate }} -- --check
      - name: Lint with clippy (${{ matrix.crate }})
        run: cargo clippy -p ${{ matrix.crate }} --all-targets --all-features -- -D clippy::all -D clippy::pedantic
      - name: Run tests in debug mode (${{ matrix.crate }})
        run: cargo test -p ${{ matrix.crate }} --all-features -- --nocapture
      - name: Run tests in release mode (${{ matrix.crate }})
        run: cargo test -p ${{ matrix.crate }} --release --all-features -- --nocapture
      - name: Enforce coverage (${{ matrix.crate }})
        run: |
          cargo llvm-cov \
            --package ${{ matrix.crate }} \
            --release \
            --all-features \
            --fail-under-lines 100 \
            --fail-under-functions 100 \
            --fail-under-branches 100 \
            --fail-under-regions 100 \
            --show-missing-lines \
            --lcov --output-path target/llvm-cov/${{ matrix.crate }}.lcov

  rust-fmt-workspace:
    name: Workspace formatting gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install rustfmt
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt
      - name: Ensure entire workspace is formatted
        run: cargo fmt --all -- --check

  javascript:
    name: "JavaScript checks (${{ matrix.project.name }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project:
          - name: web-ui
            path: web-ui
          - name: session-gateway
            path: apps/session-gateway
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: npm
          cache-dependency-path: ${{ matrix.project.path }}/package-lock.json
      - name: Install dependencies (${{ matrix.project.name }})
        working-directory: ${{ matrix.project.path }}
        run: npm ci --prefer-offline --no-audit --fund=false
      - name: Check formatting (${{ matrix.project.name }})
        working-directory: ${{ matrix.project.path }}
        run: npm run format:check
      - name: Lint (${{ matrix.project.name }})
        working-directory: ${{ matrix.project.path }}
        run: npm run lint -- --max-warnings=0
      - name: Type check (${{ matrix.project.name }})
        working-directory: ${{ matrix.project.path }}
        run: npm run typecheck
      - name: Run build (${{ matrix.project.name }})
        working-directory: ${{ matrix.project.path }}
        run: npm run build
      - name: Test with coverage (${{ matrix.project.name }})
        working-directory: ${{ matrix.project.path }}
        env:
          CI: 'true'
        run: npm run test:coverage -- --coverage.reporter=json-summary --coverage.reporter=text --run
      - name: Enforce 100% coverage (${{ matrix.project.name }})
        working-directory: ${{ matrix.project.path }}
        run: |
          node - <<'NODE'
          import fs from 'node:fs';
          import path from 'node:path';

          const summaryPath = path.resolve('coverage', 'coverage-summary.json');
          if (!fs.existsSync(summaryPath)) {
            console.error(`Coverage summary not found at ${summaryPath}`);
            process.exit(1);
          }
          const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
          const total = summary.total;
          const metrics = ['lines', 'statements', 'branches', 'functions'];
          const failures = metrics.filter((metric) => {
            const value = total?.[metric]?.pct ?? 0;
            return typeof value !== 'number' || value < 100;
          });
          if (failures.length > 0) {
            console.error('Coverage below 100% for metrics:', failures);
            process.exit(1);
          }
          const filesBelowThreshold = Object.entries(summary)
            .filter(([file]) => file !== 'total')
            .flatMap(([file, metricSummary]) => {
              return metrics
                .filter((metric) => (metricSummary?.[metric]?.pct ?? 0) < 100)
                .map((metric) => `${file} -> ${metric}: ${metricSummary[metric].pct ?? 'N/A'}%`);
            });
          if (filesBelowThreshold.length > 0) {
            console.error('Every file must maintain 100% coverage. The following entries failed:');
            for (const entry of filesBelowThreshold) {
              console.error(` - ${entry}`);
            }
            process.exit(1);
          }
          console.log('Coverage check passed with 100% across all metrics.');
          NODE

  required:
    name: Require successful jobs
    runs-on: ubuntu-latest
    needs:
      - rust
      - rust-fmt-workspace
      - javascript
    steps:
      - name: Confirm all checks passed
        run: echo "All checks succeeded."
